{"version":3,"sources":["components/LocationInfoBox.js","components/Map.js","components/Loader.js","components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["LocationInfoBox","info","className","id","title","Map","eventData","center","zoom","ReactMapboxGl","accessToken","useState","locationInfo","setLocationInfo","markers","map","ev","index","categories","coordinates","geometries","onClick","icon","locationIcon","style","containerStyle","height","width","lng","lat","defaultProps","Loader","Header","App","setEventData","loading","setLoading","useEffect","a","fetch","res","json","events","fetchEvents","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iPAgBeA,EAhBS,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACzB,OACE,sBAAKC,UAAU,gBAAf,UACE,qDACA,+BACE,sCACM,iCAASD,EAAKE,QAEpB,yCACS,iCAASF,EAAKG,kB,wCCFzBC,EAAM,YAAkC,IAA/BC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,KAC1BH,EAAMI,YAAc,CACxBC,YACE,6FAHuC,EAMHC,mBAAS,MANN,mBAMpCC,EANoC,KAMtBC,EANsB,KASrCC,EAAUR,EAAUS,KAAI,SAACC,EAAIC,GACjC,OAH6B,IAGzBD,EAAGE,WAAW,GAAGf,GAEjB,cAAC,IAAD,CACED,UAAU,kBAEViB,YAAa,CACXH,EAAGI,WAAW,GAAGD,YAAY,GAC7BH,EAAGI,WAAW,GAAGD,YAAY,IAE/BE,QAAS,kBAAMR,EAAgB,CAAEV,GAAIa,EAAGb,GAAIC,MAAOY,EAAGZ,SAPxD,SASE,cAAC,OAAD,CAAMkB,KAAMC,IAAcrB,UAAU,mBAP/Be,GAWJ,QAET,OACE,qBAAKf,UAAU,MAAMC,GAAG,MAAxB,SACE,eAACE,EAAD,CACEmB,MAAM,qCACNC,eAAgB,CACdC,OAAQ,QACRC,MAAO,SAETpB,OAAQ,CAACA,EAAOqB,IAAKrB,EAAOsB,KAC5BrB,KAAM,CAACA,GAPT,UASGM,EACAF,GAAgB,cAAC,EAAD,CAAiBX,KAAMW,UAMhDP,EAAIyB,aAAe,CACjBvB,OAAQ,CACNsB,IAAK,EACLD,IAAK,GAEPpB,KAAM,GAGOH,QC9CA0B,EAZA,WACb,OACE,sBAAK7B,UAAU,oBAAf,UACE,kDACA,sBAAKA,UAAU,UAAf,UACE,wBACA,+B,iBCMO8B,EAXA,WACb,OACE,wBAAQ9B,UAAU,SAAlB,SACE,+BACE,cAAC,OAAD,CAAMoB,KAAMC,IAAcrB,UAAU,SADtC,0CC0BS+B,MA3Bf,WAAgB,IAAD,EACqBtB,mBAAS,IAD9B,mBACNL,EADM,KACK4B,EADL,OAEiBvB,oBAAS,GAF1B,mBAENwB,EAFM,KAEGC,EAFH,KAmBb,OAfAC,qBAAU,YACS,uCAAG,gCAAAC,EAAA,6DAClBF,GAAW,GADO,SAEAG,MAChB,mDAHgB,cAEZC,EAFY,gBAKOA,EAAIC,OALX,gBAKVC,EALU,EAKVA,OAERR,EAAaQ,GACbN,GAAW,GARO,4CAAH,qDAWjBO,KACC,IAGD,gCACE,cAAC,EAAD,IACER,EAA0C,cAAC,EAAD,IAAhC,cAAC,EAAD,CAAK7B,UAAWA,IAF9B,QCbWsC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c06c0a31.chunk.js","sourcesContent":["const LocationInfoBox = ({ info }) => {\n  return (\n    <div className=\"location-info\">\n      <h2>Event Location Info</h2>\n      <ul>\n        <li>\n          ID: <strong>{info.id}</strong>\n        </li>\n        <li>\n          Title: <strong>{info.title}</strong>\n        </li>\n      </ul>\n    </div>\n  );\n};\n\nexport default LocationInfoBox;\n","import LocationInfoBox from \"./LocationInfoBox\";\nimport { useState } from \"react\";\nimport ReactMapboxGl, { Marker } from \"react-mapbox-gl\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport { Icon } from \"@iconify/react\";\nimport locationIcon from \"@iconify/icons-mdi/fire-alert\";\n\nconst Map = ({ eventData, center, zoom }) => {\n  const Map = ReactMapboxGl({\n    accessToken:\n      \"pk.eyJ1IjoiY3J5cHQwIiwiYSI6ImNraHQxejVpZTBweTMycmxocHMzYXBvOGIifQ.WAkWXTK2IB49tyuMYa3fFw\",\n  });\n\n  const [locationInfo, setLocationInfo] = useState(null);\n  const NATURAL_EVENT_WILDFIRE = 8;\n\n  const markers = eventData.map((ev, index) => {\n    if (ev.categories[0].id === NATURAL_EVENT_WILDFIRE) {\n      return (\n        <Marker\n          className=\"location-marker\"\n          key={index}\n          coordinates={[\n            ev.geometries[0].coordinates[0],\n            ev.geometries[0].coordinates[1],\n          ]}\n          onClick={() => setLocationInfo({ id: ev.id, title: ev.title })}\n        >\n          <Icon icon={locationIcon} className=\"location-icon\" />\n        </Marker>\n      );\n    }\n    return null;\n  });\n  return (\n    <div className=\"map\" id=\"map\">\n      <Map\n        style=\"mapbox://styles/mapbox/streets-v11\"\n        containerStyle={{\n          height: \"100vh\",\n          width: \"100vw\",\n        }}\n        center={[center.lng, center.lat]}\n        zoom={[zoom]}\n      >\n        {markers}\n        {locationInfo && <LocationInfoBox info={locationInfo} />}\n      </Map>\n    </div>\n  );\n};\n\nMap.defaultProps = {\n  center: {\n    lat: 0,\n    lng: 0,\n  },\n  zoom: 3,\n};\n\nexport default Map;\n","import React from \"react\";\n\nconst Loader = () => {\n  return (\n    <div className=\"spinner-container\">\n      <h1>Fetching data...</h1>\n      <div className=\"spinner\">\n        <div></div>\n        <div></div>\n      </div>\n    </div>\n  );\n};\n\nexport default Loader;\n","import { Icon } from \"@iconify/react\";\nimport locationIcon from \"@iconify/icons-mdi/projector\";\n\nconst Header = () => {\n  return (\n    <header className=\"header\">\n      <h1>\n        <Icon icon={locationIcon} className=\"icon\" />\n        Event tracker powered by NASA API\n      </h1>\n    </header>\n  );\n};\n\nexport default Header;\n","import Map from \"./components/Map\";\nimport Loader from \"./components/Loader\";\nimport { useState, useEffect } from \"react\";\nimport Header from \"./components/Header\";\n\nfunction App() {\n  const [eventData, setEventData] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchEvents = async () => {\n      setLoading(true);\n      const res = await fetch(\n        \"https://eonet.sci.gsfc.nasa.gov/api/v2.1/events\"\n      );\n      const { events } = await res.json();\n\n      setEventData(events);\n      setLoading(false);\n    };\n\n    fetchEvents();\n  }, []);\n\n  return (\n    <div>\n      <Header />\n      {!loading ? <Map eventData={eventData} /> : <Loader />};\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}